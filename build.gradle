import org.apache.tools.ant.taskdefs.condition.Os
import com.badlogic.gdx.tools.texturepacker.TexturePacker

buildscript {
    repositories {
    	mavenLocal()
        mavenCentral()
        maven { url 'https://github.com/steffenschaefer/gwt-gradle-plugin/raw/maven-repo/' }
        jcenter()
        maven { url 'https://maven.google.com' }
		maven { url "https://jitpack.io" }
        maven { url 'https://plugins.gradle.org/m2/' }
		maven { url "https://oss.sonatype.org/service/local/repositories/releases/content/" }
    }
    dependencies {
		classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
		classpath 'me.champeau.gradle:jmh-gradle-plugin:0.4.8'
		classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.9.0'
		classpath 'com.badlogicgames.gdx:gdx-tools:1.9.8'
		classpath "org.mini2Dx:gradle-ikvm-plugin:2.10.1"
		classpath "org.mini2Dx:gradle-mini2Dx-mgcb:1.0.1"
		classpath 'com.android.tools.build:gradle:3.4.2'
    }
}

Properties sdkProperties = new Properties()
def sdkPropertiesFile = project.rootProject.file('local.properties');
if(sdkPropertiesFile.exists()) {
	sdkProperties.load(sdkPropertiesFile.newDataInputStream())
}
if(sdkProperties.getProperty('sdk.ikvm.dir') == null) {
	sdkProperties.setProperty('sdk.ikvm.dir', '../_tools/ikvm')
}

def ikvmDir = sdkProperties.getProperty('sdk.ikvm.dir')

if(project.hasProperty('ossrhUser') && project.hasProperty("release")) {
	apply plugin: "files.codearte.nexus-staging"

	nexusStaging {
		packageGroup = 'org.mini2Dx'
		username = ossrhUser
		password = ossrhPassword
	}
}

ext {
	androidBeansVersion="1.0.0"
	androidVersion="4.4"
	artemisVersion="2.1.0"
	beanutilsVersion="1.8.3"
	gdxVersion="1.9.8"
	gdxAdvancedControllersVersion="0.3.0"
	langVersion="3.1"
	multiDexVersion="1.0.1"
	nativesLoaderVersion="1.0.0"
	reflectionsVersion="0.9.10"
	roboVMVersion="2.3.6"
	
	junitVersion="4.8.1"
	jmockVersion="2.5.1"
	concurrentUnitVersion="0.4.2"
}

subprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"
    
    tasks.eclipse.doLast {
    		delete ".project"
	}
	
	repositories {
		mavenLocal()
		mavenCentral()
		jcenter()
		maven { url "https://jitpack.io" }
		maven { url "https://oss.sonatype.org/service/local/repositories/releases/content/" }
		maven { url 'https://maven.google.com' }
	}
}

def docProjects() {
	subprojects.findAll { !it.name.contains('uat') && !it.name.contains('monogame') }
}

def projectVersion = '2.0.0-SNAPSHOT';

configure(docProjects()) {
	apply plugin: "signing"
	apply plugin: "maven"
	
	group = 'org.mini2Dx'
	version = projectVersion

	if(project.name.contains("monogame")) {
		if(ikvmDir.contains('_tools')) {
			if(!project.file(ikvmDir).exists()) {
				def ikvmZipFile = file('../_tools/ikvm.zip')
				project.copy({
					from zipTree(ikvmZipFile)
					into '../_tools/'
				})
			}
		}
	} else if(project.name.contains("android")) {
		apply plugin: "com.android.library"
		
		task javadoc(type: Javadoc) {
			failOnError = false
			source = android.sourceSets.main.java.srcDirs
		    classpath += configurations.compile
		
		    afterEvaluate {
		        // Wait after evaluation to add the android classpath
		        // to avoid "buildToolsVersion is not specified" error
		        classpath += files(android.getBootClasspath())
		
		        // Process AAR dependencies
		        def aarDependencies = classpath.filter { it.name.endsWith('.aar') }
		        classpath -= aarDependencies
		        aarDependencies.each { aar ->
		            // Extract classes.jar from the AAR dependency, and add it to the javadoc classpath
		            def outputPath = "$buildDir/tmp/aarJar/${aar.name.replace('.aar', '.jar')}"
		            classpath += files(outputPath)
		
		            // Use a task so the actual extraction only happens before the javadoc task is run
		            dependsOn task(name: "extract ${aar.name}").doLast {
		                extractEntry(aar, 'classes.jar', outputPath)
		            }
		        }
		    }
		}
		
		task sourcesJar(type: Jar) {
			archiveClassifier = 'sources'
			from android.sourceSets.main.java.srcDirs[0]
		}
		
		task javadocJar(type: Jar) {
			archiveClassifier = 'javadoc'
			from javadoc
		}
		
		artifacts {
			archives javadocJar, sourcesJar
		}
	} else {
		apply plugin: "java"
		apply plugin: "checkstyle"
		
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
		
		configurations {
			testOutput.extendsFrom (testCompile)
		}
		
		task sourcesJar(type: Jar) {
			archiveClassifier = 'sources'
			from sourceSets.main.allSource
		}

		task testJar(type: Jar, dependsOn: testClasses) {
			from sourceSets.test.output
			include '**/serialization/**/*.class','**/di/**/*.class'
			archiveClassifier = 'test'
		}

		task javadocJar(type: Jar) {
			archiveClassifier = 'javadoc'
			from javadoc
		}

		artifacts {
			archives javadocJar, sourcesJar, testJar
			testOutput testJar
		}

		checkstyle {
			configFile = project.file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
			toolVersion = "8.12"
			sourceSets = [sourceSets.main]
		}
	}
  
	// Maven Central publication
	if(project.hasProperty('ossrhUser')) {
		signing {
			sign configurations.archives
		}
		
		uploadArchives {
			repositories {
				mavenDeployer {
					// POM signature
					beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
					// Target repository
					repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
						authentication(userName: ossrhUser, password: ossrhPassword)
					}
					pom.project {
						name project.name
						description project.description
						packaging 'jar'
						url 'https://github.com/mini2Dx/mini2Dx'
	
						scm {
							connection 'scm:git:https://github.com/mini2Dx/mini2Dx.git'
							developerConnection 'scm:git:git@github.com:mini2Dx/mini2Dx.git'
							url 'https://github.com/mini2Dx/mini2Dx.git'
						}

						licenses {
							license {
								name 'Apache License 2.0'
								url 'https://opensource.org/licenses/Apache-2.0'
								distribution 'repo'
							}
						}
	
						developers {
							developer {
								id = 'tomcashman'
								name = 'Thomas Cashman'
								email = 'thomascashman404@gmail.com'
							}
						}
					}
				}
			}
		}
	}
}

project(":" + rootProject.name + "-core") {
	description = "mini2Dx core library"
    
    apply plugin: "me.champeau.gradle.jmh"
    apply plugin: "jacoco"

    dependencies {
		compile "org.mini2Dx:gdx-compression:$gdxVersion"
		compile "org.mini2Dx:gdx-input:$gdxVersion"
		compile "org.mini2Dx:gdx-json:$gdxVersion"
		compile "org.mini2Dx:gdx-math:$gdxVersion"
		compile "org.mini2Dx:gdx-xml:$gdxVersion"

		testCompile "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
        testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
		testCompile "net.jodah:concurrentunit:$concurrentUnitVersion"
    }
	
	jmh {
		timeUnit = 'ns'
		threads = Runtime.getRuntime().availableProcessors()
		warmupIterations = 10
		iterations = 10
		fork = Runtime.getRuntime().availableProcessors()
		jvmArgsPrepend = '-Xmx1024m'
	}
    
	jacocoTestReport {
		group = "Reporting"
		reports {
			xml.enabled true
			csv.enabled false
			html.destination file("${buildDir}/reports/coverage")
		}
		afterEvaluate {
			classDirectories = files(classDirectories.files.collect {
				fileTree(dir: it)
			})
		}
	}
}

project(":" + rootProject.name + "-libgdx") {
	description = "mini2Dx LibGDX library"
	
	dependencies {
		compile project(":" + rootProject.name + "-core")
		compile "com.badlogicgames.gdx:gdx:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
		compile "de.golfgl.gdxcontrollerutils:gdx-controllers-advanced:$gdxAdvancedControllersVersion"
		compile "org.mini2Dx:natives-loader:$nativesLoaderVersion"

		testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
		testCompile "net.jodah:concurrentunit:$concurrentUnitVersion"
	}
}

project(":" + rootProject.name + "-libgdx-desktop") {
	description = "mini2Dx desktop runtime"

	dependencies {
		compile project(":" + rootProject.name + "-libgdx")
		compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
		compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
		compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
		compile "de.golfgl.gdxcontrollerutils:gdx-controllers-jamepad:$gdxAdvancedControllersVersion"
		compile "org.reflections:reflections:$reflectionsVersion"

		testCompile "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
		testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
		testCompile "net.jodah:concurrentunit:$concurrentUnitVersion"
	}
}

if (hasAndroidSdk()) {
	project(":" + rootProject.name + "-libgdx-android") {
		description = "mini2Dx Android runtime"

		dependencies {
			api project(":" + rootProject.name + "-libgdx")

			api "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
			api "de.golfgl.gdxcontrollerutils:gdx-controllers-android:$gdxAdvancedControllersVersion"
		}
	}
}

project(":" + rootProject.name + "-tiled") {
	description = "mini2Dx Tiled support library"

	apply plugin: "me.champeau.gradle.jmh"

	dependencies {
		compile project(":" + rootProject.name + "-core")

		testCompile project(":" + rootProject.name + "-libgdx-desktop")
		testCompile "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
		testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
		testCompile "net.jodah:concurrentunit:$concurrentUnitVersion"
	}
}

project(":" + rootProject.name + "-ui") {
	description = "mini2Dx UI library"

	apply plugin: "me.champeau.gradle.jmh"

	dependencies {
		compile project(":" + rootProject.name + "-core")

		testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
		testCompile project(":" + rootProject.name + "-libgdx-desktop")

		//jmh project(":" + rootProject.name + "-headless")
	}

	task packDefaultUiTheme {
		TexturePacker.process("$projectDir/default-mdx-theme", "$projectDir/../uats-libgdx-desktop/assets", "default-mdx-theme")
	}

	jmh {
		timeUnit = 'ns'
		threads = Runtime.getRuntime().availableProcessors()
		warmupIterations = 10
		iterations = 10
		fork = Runtime.getRuntime().availableProcessors()
		jvmArgsPrepend = '-Xmx1024m'
	}
}

project(":" + rootProject.name + "-all") {
	description = "All mini2Dx core libraries packed into a single jar"

	apply plugin: "ikvm"

	dependencies {
		compile project(":" + rootProject.name + "-core")
		compile project(":" + rootProject.name + "-tiled")
		compile project(":" + rootProject.name + "-ui")
	}

	javadoc {
		failOnError = false
		title = 'mini2Dx'
		source docProjects().collect { p -> p.name.contains("android") ? p.android.sourceSets.main.java.srcDirs : p.sourceSets.main.allJava }
		classpath = files(docProjects().collect { p -> p.name.contains("android") ? p.configurations.compile : p.sourceSets.main.compileClasspath })
	}

	task fatJar(type: Jar) {
		baseName = project.name + '-fatjar'
		from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
		with jar
	}

	ikvm {
		ikvmHome = ikvmDir
		debug = false
		generateDoc = false
		jars = project.files(project.fatJar.archivePath)
	}

	build.dependsOn ikvm
}

project(":" + rootProject.name + "-uats") {
	description = "mini2Dx UATs library"
	version = projectVersion

	apply plugin: "ikvm"
	apply plugin: "org.mini2Dx.mgcb"

	task copyUatResources(type: Copy) {
		from '../uats/src/main/resources', '../tiled/src/test/resources', '../ui/src/main/resources'
		into '../uats-libgdx-desktop/assets'
	}

	ikvm {
		ikvmHome = ikvmDir
		debug = false
		generateDoc = false
		jars = project.files(project.jar.archivePath)
		dllReferences = [project.file("../all/build/libs/mini2Dx-all.dll").absolutePath]
	}

	dependencies {
		compile project(":" + rootProject.name + "-all")
	}
	
	mgcb {
		assetsDirectory = file('../uats-libgdx-desktop/assets')
		projectDirectory = file('../uats-monogame-desktop/Content')
		dlls = files('../monogame-pipeline-ext/bin/Debug/monogame-pipeline-ext.dll')
	}

	processResources.dependsOn copyUatResources
    generateMonoGameContent.dependsOn processResources
    ikvm.dependsOn project(":" + rootProject.name + "-all").build
	build.dependsOn ikvm, generateMonoGameContent
}

if (hasAndroidSdk()){
	project(":" + rootProject.name + "-uats-libgdx-android") {
		description = "mini2Dx Android UATs launcher"

		apply plugin: "com.android.application"

		sourceCompatibility = 1.7
		targetCompatibility = 1.7

		ext {
			appName = 'mini2Dx-uats'
		}

		configurations {
			natives
		}

		//project(":" + rootProject.name + "-uats-libgdx-android").installDebug.dependsOn project(":" + rootProject.name + "-uats").processResources

		dependencies {
			api project(":" + rootProject.name + "-libgdx-android")
			api project(":" + rootProject.name + "-uats")
			api "com.android.support:multidex:$multiDexVersion"

			natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
			natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
			natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
			natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
			natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"
			natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi"
			natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
			natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-arm64-v8a"
			natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
			natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86_64"

			androidTestCompile (project(path: ":" + rootProject.name + "-core", configuration: 'testOutput')) {
				exclude group: 'junit'
				exclude group: 'org.hamcrest'
			}
			androidTestCompile ("org.jmock:jmock-junit4:$jmockVersion") {
				exclude group: 'junit'
				exclude group: 'org.hamcrest'
			}
			androidTestCompile ("org.jmock:jmock-legacy:$jmockVersion") {
				exclude group: 'junit'
				exclude group: 'org.hamcrest'
			}
			androidTestCompile 'com.android.support.test:runner:0.4'
			androidTestCompile 'com.android.support.test:rules:0.4'
		}
	}
}

project(":" + rootProject.name + "-uats-libgdx-desktop") {
	description = "mini2Dx desktop UATs launcher"
	
    apply plugin: "java"
	apply plugin: "application"

    dependencies {
        compile project(":" + rootProject.name + "-uats")
        compile project(":" + rootProject.name + "-libgdx-desktop")
		compile "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
    }
}

project(":" + rootProject.name + "-monogame") {
	description = "mini2Dx MonoGame runtime"

	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		task build(type:Exec, dependsOn: project(":" + rootProject.name + "-uats").build) {
			commandLine 'cmd', '/c', 'msbuild.exe', '../mini2Dx.sln'
		}
	} else {
		task build(type:Exec, dependsOn: project(":" + rootProject.name + "-uats").build) {
			commandLine 'msbuild', '../mini2Dx.sln'
		}
	}
}

boolean hasAndroidSdk() {
	try {
		def rootDir = "$rootDir"
		def localProperties = new File(rootDir, "local.properties")
		if (localProperties.exists()) {
			Properties properties = new Properties()
			localProperties.withInputStream { instr ->
				properties.load(instr)
			}
			def androidHome = properties.getProperty('sdk.dir')
			if(androidHome != null && androidHome.length() > 0) {
				println androidHome
				return true;
			}
		}
	} catch (all) {
		println all
	}
	try {
		def androidHome = "$System.env.ANDROID_HOME"
		if(androidHome != null && androidHome.length() > 0 && !androidHome.contains('null')) {
			println androidHome
			return true;
		}
	} catch (all) {
		println all
	}

	try {
		def androidExecPath = new ByteArrayOutputStream()
		if (Os.isFamily(Os.FAMILY_WINDOWS)) {
			return false
		} else {
			exec {
				commandLine 'which', 'android'
				standardOutput = androidExecPath
			}
		}
		return androidExecPath.toString() != null && androidExecPath.toString().trim().length() > 0;
	} catch (all) {
		println all
	}
	return false
}