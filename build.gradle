import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
    	mavenLocal()
        mavenCentral()
        maven { url 'https://github.com/steffenschaefer/gwt-gradle-plugin/raw/maven-repo/' }
        jcenter()
    }
    dependencies {
		classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
        classpath 'com.android.tools.build:gradle:1.2.3'
        classpath 'org.robovm:robovm-gradle-plugin:1.8.0'
    }
}

subprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"
    apply plugin: "maven"

	group = 'org.mini2Dx'
    version = '1.3.0-SNAPSHOT'
    
    uploadArchives {
		repositories {
			mavenDeployer {
				repository(url: "http://maven.mini2dx.org/content/repositories/releases") {
					if(project.hasProperty('mini2DxMavenUser')) {
						authentication(userName: project.property('mini2DxMavenUser'), password: project.property('mini2DxMavenPassword'))
					}
    			}
    			snapshotRepository(url: "http://maven.mini2dx.org/content/repositories/snapshots") {
    				if(project.hasProperty('mini2DxMavenUser')) {
    					authentication(userName: project.property('mini2DxMavenUser'), password: project.property('mini2DxMavenPassword'))
    				}
    			}
			}
		}
	}

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }
    
    ext {
    	gdxVersion="1.7.0"
		roboVMVersion="1.8.0"
		androidVersion="4.4"
		beanutilsVersion="1.8.3"
		langVersion="3.1"
		reflectionsVersion="0.9.10"
		artemisVersion="1.1.0"
		
		junitVersion="4.8.1"
		jmockVersion="2.5.1"
		
		//org.gradle.daemon="true"
		//org.gradle.jvmargs="-Xms128m -Xmx256m"
		//org.gradle.configureondemand="true"
    }
    
    tasks.eclipse.doLast {
    	delete ".project"
	}
}

def docProjects() {
	subprojects.findAll { !it.name.contains('uat') }
}

configure(docProjects()) {
	apply plugin: "java"
}

project(":" + rootProject.name + "-core") {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
    
    configurations {
	    testOutput.extendsFrom (testCompile)
	}

    dependencies {
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers:$gdxVersion"
        
        compile "org.apache.commons:commons-lang3:$langVersion"
        compile "commons-beanutils:commons-beanutils:$beanutilsVersion"
        
        testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
    }
    
	task testJar(type: Jar, dependsOn: testClasses) {
	    from sourceSets.test.output
	    classifier = 'test'
	}
    
    artifacts {
	    testOutput testJar
	}
}

project(":" + rootProject.name + "-desktop") {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    dependencies {
    	compile project(":" + rootProject.name + "-core")
    	
    	compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-controllers-desktop:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers-platform:$gdxVersion:natives-desktop"
    	
    	compile "org.reflections:reflections:$reflectionsVersion"
    	
    	testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
		testCompile project(path: ":" + rootProject.name + "-core", configuration: 'testOutput')
    }
}

project(":" + rootProject.name + "-tiled") {
    dependencies {
		compile project(":" + rootProject.name + "-core")
		
		testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
    }
}

project(":" + rootProject.name + "-artemis-odb") {
    dependencies {
		compile project(":" + rootProject.name + "-core")
		compile "net.onedaybeard.artemis:artemis-odb:$artemisVersion"
		
		testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
    }
}

project(":" + rootProject.name + "-uats") {
    apply plugin: "java"
        
    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    dependencies {
    	compile project(":" + rootProject.name + "-tiled")
    }
	
	task docs(type: Javadoc) {
		source docProjects().collect {p -> p.sourceSets.main.allJava }
		classpath = files(docProjects().collect {p -> p.sourceSets.main.compileClasspath})
		destinationDir = new File(project.parent.projectDir, 'docs')
	}
	docs.dependsOn docProjects().build
}

project(":" + rootProject.name + "-uats-desktop") {
    apply plugin: "java"
    
    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    dependencies {
        compile project(":" + rootProject.name + "-uats")
        compile project(":" + rootProject.name + "-desktop")
    }
}

if (hasAndroidSdk()) {
	project(":" + rootProject.name + "-android") {
		dependencies {
			compile project(":" + rootProject.name + "-core")
			
			compile files(fileTree(dir: 'libs', includes: ['*.jar']))
			
			compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
			compile "com.badlogicgames.gdx:gdx-controllers:$gdxVersion"
			compile "com.badlogicgames.gdx:gdx-controllers-android:$gdxVersion"
			
			testCompile "junit:junit:$junitVersion"
			testCompile "org.jmock:jmock-junit4:$jmockVersion"
			testCompile "org.jmock:jmock-legacy:$jmockVersion"
			testCompile project(path: ":" + rootProject.name + "-core", configuration: 'testOutput')
		}
	}
	
	project(":" + rootProject.name + "-uats-android") {
		apply plugin: "android"
		
		ext {
			appName = 'mini2Dx-uats'
		}
		
		configurations { natives }
		
		dependencies {
			compile project(":" + rootProject.name + "-uats")
			compile project(":" + rootProject.name + "-android")
			
			natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
			natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
			natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
		}
	}
}

if (Os.isFamily(Os.FAMILY_MAC)) {
	project(":" + rootProject.name + "-ios") {
		sourceCompatibility = 1.7
		targetCompatibility = 1.7
	
		dependencies {
			compile project(":" + rootProject.name + "-core")
			
			compile "org.reflections:reflections:$reflectionsVersion"
			compile "org.robovm:robovm-rt:${roboVMVersion}"
			compile "org.robovm:robovm-cocoatouch:${roboVMVersion}"
			compile "com.badlogicgames.gdx:gdx-backend-robovm:$gdxVersion"
			compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios"
			
			testCompile "junit:junit:$junitVersion"
			testCompile "org.jmock:jmock-junit4:$jmockVersion"
			testCompile "org.jmock:jmock-legacy:$jmockVersion"
		}
	}
	
	project(":" + rootProject.name + "-uats-ios") {
		apply plugin: "java"
		apply plugin: "robovm"
		
		sourceCompatibility = 1.7
		targetCompatibility = 1.7
		
		configurations { natives }
		
		eclipse.project {
			natures 'org.robovm.eclipse.RoboVMNature'
		}
		
		dependencies {
			compile project(":" + rootProject.name + "-uats")
			compile project(":" + rootProject.name + "-ios")
		}
	}
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

boolean hasAndroidSdk() {
	try {
		def androidHome = "$sdk.dir"
		if(androidHome != null && androidHome.length() > 0) {
			println androidHome
			return true;
		}
	} catch (all) {
		println all
	}
	try {
		def androidHome = "$System.env.ANDROID_HOME"
		if(androidHome != null && androidHome.length() > 0 && !androidHome.contains('null')) {
			println androidHome
			return true;
		}
	} catch (all) {
		println all
	}
	
	try {
		def androidExecPath = new ByteArrayOutputStream()
		if (Os.isFamily(Os.FAMILY_WINDOWS)) {
			return false
		} else {
			exec {
				commandLine 'which', 'android'
				standardOutput = androidExecPath
			}
		}
		return androidExecPath.toString() != null && androidExecPath.toString().trim().length() > 0;
	} catch (all) {
		println all
	}
	return false
}
